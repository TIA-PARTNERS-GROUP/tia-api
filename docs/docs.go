// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password, returning a JWT and session details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or deactivated account",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revokes the current user's session token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Logout",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get Current User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/businesses": {
            "get": {
                "description": "Retrieves a list of all businesses, with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Businesses"
                ],
                "summary": "Get all businesses",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term for name, tagline, or description",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.BusinessResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new business record for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Businesses"
                ],
                "summary": "Create a new business",
                "parameters": [
                    {
                        "description": "Business Creation Data",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateBusinessInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Operator user not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/businesses/{id}": {
            "get": {
                "description": "Retrieves the details of a single business by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Businesses"
                ],
                "summary": "Get a business by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessResponse"
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a business's details by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Businesses"
                ],
                "summary": "Update a business",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Business Update Data",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateBusinessInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessResponse"
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a business by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Businesses"
                ],
                "summary": "Delete a business",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Business is in use and cannot be deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves a list of all user accounts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.UserResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User Creation Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UserCreationSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "User with email already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "422": {
                        "description": "Password complexity error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves the details of a single user by their unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a user's details by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Update Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UserUpdateSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user by their ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BusinessCategory": {
            "type": "string",
            "enum": [
                "B2B",
                "B2C",
                "Non_Profit",
                "Government",
                "Mixed"
            ],
            "x-enum-varnames": [
                "BusinessCategoryB2B",
                "BusinessCategoryB2C",
                "BusinessCategoryNonProfit",
                "BusinessCategoryGovernment",
                "BusinessCategoryMixed"
            ]
        },
        "models.BusinessPhase": {
            "type": "string",
            "enum": [
                "Startup",
                "Growth",
                "Mature",
                "Exit"
            ],
            "x-enum-varnames": [
                "BusinessPhaseStartup",
                "BusinessPhaseGrowth",
                "BusinessPhaseMature",
                "BusinessPhaseExit"
            ]
        },
        "models.BusinessType": {
            "type": "string",
            "enum": [
                "Consulting",
                "Retail",
                "Technology",
                "Manufacturing",
                "Services",
                "Other"
            ],
            "x-enum-varnames": [
                "BusinessTypeConsulting",
                "BusinessTypeRetail",
                "BusinessTypeTechnology",
                "BusinessTypeManufacturing",
                "BusinessTypeServices",
                "BusinessTypeOther"
            ]
        },
        "ports.BusinessResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "address": {
                    "type": "string"
                },
                "business_category": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "business_phase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "business_type": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "operator_user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "operator_user_id": {
                    "type": "integer"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "tagline": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "ports.CreateBusinessInput": {
            "type": "object",
            "required": [
                "business_category",
                "business_phase",
                "business_type",
                "name",
                "operator_user_id"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 100
                },
                "business_category": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "business_phase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "business_type": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "country": {
                    "type": "string",
                    "maxLength": 60
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "operator_user_id": {
                    "type": "integer"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "state": {
                    "type": "string",
                    "maxLength": 60
                },
                "tagline": {
                    "type": "string",
                    "maxLength": 100
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "ports.LoginInput": {
            "type": "object",
            "required": [
                "login_email",
                "password"
            ],
            "properties": {
                "login_email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "ports.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "session_id": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                }
            }
        },
        "ports.UpdateBusinessInput": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "address": {
                    "type": "string",
                    "maxLength": 100
                },
                "business_category": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "business_phase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "business_type": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "country": {
                    "type": "string",
                    "maxLength": 60
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "state": {
                    "type": "string",
                    "maxLength": 60
                },
                "tagline": {
                    "type": "string",
                    "maxLength": 100
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "ports.UserCreationSchema": {
            "type": "object",
            "required": [
                "first_name",
                "login_email",
                "password"
            ],
            "properties": {
                "adk_session_id": {
                    "type": "string",
                    "maxLength": 128
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "login_email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8
                }
            }
        },
        "ports.UserResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "login_email": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "ports.UserUpdateSchema": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "adk_session_id": {
                    "type": "string",
                    "maxLength": 128
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "email_verified": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "login_email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "TIA API",
	Description:      "This is the API server for the TIA platform.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
