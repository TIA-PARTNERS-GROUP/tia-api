{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API documentation for the TIA Partner platform.",
        "title": "TIA Partner API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password, creating a new session and returning a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login, returns user data and token",
                        "schema": {
                            "$ref": "#/definitions/ports.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid email/password or account deactivated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidates the current user session (token).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Logout",
                "responses": {
                    "204": {
                        "description": "Successfully logged out (No Content)"
                    },
                    "401": {
                        "description": "Unauthorized or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of the currently authenticated user based on the provided JWT token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get Current User",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or token missing/invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error or invalid context",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/businesses": {
            "get": {
                "description": "Retrieves a list of all business profiles with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses"
                ],
                "summary": "List All Businesses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by Operator User ID",
                        "name": "operator_user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by business type",
                        "name": "business_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by business category",
                        "name": "business_category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by business phase",
                        "name": "business_phase",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or description",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of businesses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.BusinessResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new business profile, restricted to the authenticated user (OperatorUserID must match Auth UserID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses"
                ],
                "summary": "Create New Business",
                "parameters": [
                    {
                        "description": "Business creation details",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateBusinessInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Business created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: OperatorUserID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/businesses/{id}": {
            "get": {
                "description": "Retrieves a business profile by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses"
                ],
                "summary": "Get Business by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Business retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid business ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing business profile. Only the designated OperatorUserID can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses"
                ],
                "summary": "Update Business Profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateBusinessInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Business updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Not the operator user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a business profile. Only the designated OperatorUserID can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses"
                ],
                "summary": "Delete Business Profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Business deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid business ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Not the operator user or business is in use",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Business not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/businesses/{id}/connections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all connections (initiated and received) associated with a specific business ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "List Connections for a Business",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by connection status (pending, active, rejected, inactive)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by connection type (Partnership, Client, Supplier, etc.)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of connections",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessConnectionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid business ID or query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/businesses/{id}/tags": {
            "get": {
                "description": "Retrieves all tags associated with a specific business.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses",
                    "tags"
                ],
                "summary": "Get All Tags for a Business",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of business tags",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessTagsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid business ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new tag (e.g., 'client', 'service') and associates it with a specific business.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses",
                    "tags"
                ],
                "summary": "Add Tag to Business",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Business ID to associate the tag with",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag details (TagType, Description)",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateBusinessTagInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag created and associated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessTagResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid business ID, request body, or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrBusinessTagAlreadyExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/connections": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new connection request between two businesses. The initiating user is taken from the auth context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "Initiate Business Connection Request",
                "parameters": [
                    {
                        "description": "Connection request details (InitiatingBusinessID, ReceivingBusinessID, ConnectionType)",
                        "name": "connection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateBusinessConnectionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Connection request created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, validation failed, or ErrCannotConnectToSelf",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrBusinessConnectionAlreadyExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/connections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific connection record by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "Get Business Connection by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid connection ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrBusinessConnectionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates modifiable fields of an existing connection (e.g., Notes, Type). This is typically restricted to the initiating user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "Update Business Connection Details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update (e.g., ConnectionType, Notes)",
                        "name": "connection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateBusinessConnectionInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or connection ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not authorized to update)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrBusinessConnectionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific connection record. Restricted to the initiating user or the receiving business's operator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "Delete Business Connection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Connection deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid connection ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not authorized to delete)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrBusinessConnectionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/connections/{id}/accept": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of a specific connection request to 'active'. Restricted to the receiving business's operator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "Accept Pending Connection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection successfully accepted and set to active",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid connection ID or ErrConnectionNotPending",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the receiving business's operator)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrBusinessConnectionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/connections/{id}/reject": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of a specific connection request to 'rejected'. Restricted to the receiving business's operator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business_connections"
                ],
                "summary": "Reject Pending Connection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection successfully rejected",
                        "schema": {
                            "$ref": "#/definitions/ports.BusinessConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid connection ID or ErrConnectionNotPending",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the receiving business's operator)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrBusinessConnectionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/daily-activities": {
            "get": {
                "description": "Retrieves a list of all defined daily activities.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities"
                ],
                "summary": "Get All Daily Activities",
                "responses": {
                    "200": {
                        "description": "List of daily activities",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DailyActivity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new daily activity definition (e.g., \"30-minute meditation\").",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities"
                ],
                "summary": "Create Daily Activity",
                "parameters": [
                    {
                        "description": "Activity details (Name, Description)",
                        "name": "activity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateDailyActivityInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Activity created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.DailyActivity"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrActivityNameExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/daily-activities/{id}": {
            "get": {
                "description": "Retrieves a specific daily activity definition by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities"
                ],
                "summary": "Get Daily Activity by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Activity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activity retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.DailyActivity"
                        }
                    },
                    "400": {
                        "description": "Invalid activity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrDailyActivityNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/daily-activities/{id}/enrolments": {
            "get": {
                "description": "Retrieves a list of all users currently enrolled in a specified daily activity.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities",
                    "enrolments"
                ],
                "summary": "Get All Enrolments for Activity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Daily Activity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user enrolments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.ActivityEnrolmentResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid activity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Enrols the authenticated user in a specified daily activity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities",
                    "enrolments"
                ],
                "summary": "Enrol User in Daily Activity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Daily Activity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Enrolment successful",
                        "schema": {
                            "$ref": "#/definitions/ports.ActivityEnrolmentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid activity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Activity or user not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrAlreadyEnrolled",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraws the authenticated user from a specified daily activity.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities",
                    "enrolments"
                ],
                "summary": "Withdraw User from Daily Activity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Daily Activity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Withdrawal successful (No Content)"
                    },
                    "400": {
                        "description": "Invalid activity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrEnrolmentNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Retrieves a list of all events with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get All Events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by User ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events created after this date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events created before this date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.EventResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve events",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new internal system event record. The UserID is automatically injected from the authenticated context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create New Event Record",
                "parameters": [
                    {
                        "description": "Event details (EventType, Payload)",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateEventInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized or missing authentication context",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Retrieves a specific event record by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get Event by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid event ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/feedback": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all submitted feedback. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedback"
                ],
                "summary": "Get All Feedback",
                "responses": {
                    "200": {
                        "description": "List of feedback entries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.FeedbackResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/feedback/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific feedback entry by its unique ID. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedback"
                ],
                "summary": "Get Feedback by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feedback ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedback entry retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.FeedbackResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid feedback ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrFeedbackNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific feedback entry by its unique ID. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedback"
                ],
                "summary": "Delete Feedback",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feedback ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Feedback deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid feedback ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrFeedbackNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/inferred-connections": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new record for a potential connection inferred by a model. Intended for internal/system use.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inferred_connections"
                ],
                "summary": "Create Inferred Connection Record",
                "parameters": [
                    {
                        "description": "Inferred connection details",
                        "name": "connection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateInferredConnectionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Connection record created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.InferredConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/inferred-connections/source/{entityType}/{entityID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all potential connections inferred from a specific source entity (e.g., a Project or Business).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inferred_connections"
                ],
                "summary": "Get Inferred Connections by Source Entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of the source entity (e.g., business, project)",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the source entity",
                        "name": "entityID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of inferred connections",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.InferredConnectionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid entity ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/l2e-responses": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submits a user's response or data payload for a Learn-to-Earn (L2E) module. The UserID is taken from the auth context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "l2e"
                ],
                "summary": "Submit New L2E Response",
                "parameters": [
                    {
                        "description": "L2E response data payload",
                        "name": "response",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateL2EResponseInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response recorded successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.L2EResponseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid context",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/notifications": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new notification record. Requires authentication, typically used by system services.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Create Notification (Internal/System Use)",
                "parameters": [
                    {
                        "description": "Notification details (ReceiverUserID, Title, Message, Type)",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateNotificationInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notification created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.NotificationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrReceiverNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all project records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get All Projects",
                "responses": {
                    "200": {
                        "description": "List of projects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.ProjectResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve projects",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new project record. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create New Project",
                "parameters": [
                    {
                        "description": "Project creation details (Name, ManagedByUserID, ProjectStatus)",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateProjectInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrManagerNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrProjectNameExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific project record by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get Project by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing project record. Only the Project Manager can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update Project Details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateProjectInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a project record and all related data (members, regions, skills). Only the Project Manager can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Project deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/applicants": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all users who have applied to a specific project. Only accessible by the **Project Manager**.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "applicants"
                ],
                "summary": "Get Applicants for Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of applicants",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.ProjectApplicantResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/apply": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submits an application for the authenticated user to join a project. The UserID is taken from the auth context.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "applicants"
                ],
                "summary": "Apply to Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Application submitted successfully (Created)"
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound or user not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrAlreadyApplied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraws the authenticated user's application from a project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "applicants"
                ],
                "summary": "Withdraw Application",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Application withdrawn successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrApplicationNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all members associated with a project. Accessible by any authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "members"
                ],
                "summary": "Get All Project Members",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of project members",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectMembersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a user to a project with a specified role. Only accessible by the **Project Manager**.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "members"
                ],
                "summary": "Add Project Member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member details (UserID, Role)",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.AddProjectMemberInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Member added successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID, request body, or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound or ErrUserNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrProjectMemberAlreadyExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/members/{userID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific project member record by Project ID and User ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "members"
                ],
                "summary": "Get Specific Project Member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID of the member",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectMemberNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the role of an existing project member. Only accessible by the **Project Manager**.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "members"
                ],
                "summary": "Update Project Member Role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID of the member",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role for the member",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateProjectMemberRoleInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member role updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID, request body, or ErrInvalidRole",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectMemberNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a user from a project. Allowed for the **Project Manager** (to remove anyone) or the **User** (to remove self).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "members"
                ],
                "summary": "Remove Project Member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID of the member to remove",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member removed successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid ID or ErrCannotRemoveManager",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the manager and not the user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectMemberNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/regions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all geographical regions associated with a specific project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "regions"
                ],
                "summary": "Get Regions for Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of regions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.ProjectRegionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Associates a geographical region (identified by its short code/ID) with a project. Only accessible by the **Project Manager**.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "regions"
                ],
                "summary": "Add Region to Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Region details (RegionID)",
                        "name": "region",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.AddProjectRegionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Region associated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectRegionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID, request body, or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrRegionAlreadyAdded",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/regions/{regionID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dissociates a geographical region from a project. Only accessible by the **Project Manager**.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "regions"
                ],
                "summary": "Remove Region from Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Region ID (e.g., USA, AUS)",
                        "name": "regionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Region removed successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid project ID or missing regionID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectRegionNotFound or ErrProjectNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/skills": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all skill requirements for a specific project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "skills"
                ],
                "summary": "Get Skills Required by Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of required skills",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectSkillsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Associates a specific skill (by Skill ID) with a project and sets its importance level. Only accessible by the **Project Manager**.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "skills"
                ],
                "summary": "Add Skill Requirement to Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Skill details (SkillID, Importance)",
                        "name": "skill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateProjectSkillInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Skill requirement added successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectSkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID, skill ID, request body, or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectNotFound or ErrSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrProjectSkillAlreadyExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}/skills/{skillID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the importance level (required, preferred, optional) for an existing project skill. Only accessible by the **Project Manager**.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "skills"
                ],
                "summary": "Update Project Skill Importance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "skillID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New importance level",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateProjectSkillInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Skill importance updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectSkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID, request body, or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a skill requirement association from a project. Only accessible by the **Project Manager**.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects",
                    "skills"
                ],
                "summary": "Remove Skill Requirement from Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "skillID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Skill requirement removed successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the project manager)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrProjectSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/publications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all publication records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "publications"
                ],
                "summary": "Get All Publications",
                "responses": {
                    "200": {
                        "description": "List of publications",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.PublicationResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve publications",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new publication (post, article, case study, etc.). The UserID in the body must match the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "publications"
                ],
                "summary": "Create New Publication",
                "parameters": [
                    {
                        "description": "Publication creation details (Title, UserID, Content, Type)",
                        "name": "publication",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreatePublicationInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Publication created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.PublicationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot create publication for another user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrPublicationSlugExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/publications/id/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific publication record by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "publications"
                ],
                "summary": "Get Publication by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publication ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Publication retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.PublicationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid publication ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrPublicationNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/publications/slug/{slug}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific publication record by its unique URL slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "publications"
                ],
                "summary": "Get Publication by Slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Publication URL Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Publication retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.PublicationResponse"
                        }
                    },
                    "400": {
                        "description": "Missing slug",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrPublicationNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/publications/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing publication record. Only the Author (UserID) can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "publications"
                ],
                "summary": "Update Publication",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publication ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update (Title, Content, Published, etc.)",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdatePublicationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Publication updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.PublicationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid publication ID or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the author)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrPublicationNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrPublicationSlugExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a publication record. Only the Author (UserID) can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "publications"
                ],
                "summary": "Delete Publication",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publication ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Publication deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid publication ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the author)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrPublicationNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/skills": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all skills, with options to filter by category, activity status, or search term.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skills"
                ],
                "summary": "Get All Skills with Filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by skill category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status (true/false)",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name, category, or description",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of skills",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.SkillResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new global skill record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skills"
                ],
                "summary": "Create New Skill",
                "parameters": [
                    {
                        "description": "Skill creation details (Name, Category)",
                        "name": "skill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateSkillInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Skill created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.SkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrSkillNameExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/skills/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific skill record by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skills"
                ],
                "summary": "Get Skill by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Skill retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.SkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid skill ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of an existing skill (e.g., category, name).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skills"
                ],
                "summary": "Update Skill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update (Category, Name, Active)",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateSkillInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Skill updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.SkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid skill ID or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrSkillNameExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific skill record. Fails if the skill is currently in use by a user or project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skills"
                ],
                "summary": "Delete Skill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Skill deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid skill ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrSkillInUse",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/skills/{id}/toggle-status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Toggles the active status of a skill (Active -\u003e Inactive, or vice versa).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "skills"
                ],
                "summary": "Toggle Skill Status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Skill status toggled successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.SkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid skill ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new recurring subscription plan definition. Requires authentication (implies admin/privileged access).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Create New Subscription Plan",
                "parameters": [
                    {
                        "description": "Subscription plan details (Name, Price, ValidDays/ValidMonths)",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateSubscriptionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscription plan created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrSubscriptionNameExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/subscriptions/subscribe": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new UserSubscription record for the authenticated user, starting their access to a plan. Enforces self-subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Subscribe User to a Plan",
                "parameters": [
                    {
                        "description": "Subscription details (UserID and SubscriptionID)",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UserSubscribeInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User subscribed successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot subscribe for another user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrSubscriptionNotFound or ErrUserNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific subscription plan definition by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get Subscription Plan by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription plan retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid subscription ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrSubscriptionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tags/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific business tag entry by its unique Tag ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "businesses",
                    "tags"
                ],
                "summary": "Delete Business Tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Unique Business Tag ID (NOT the Business ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid tag ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrBusinessTagNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all user profiles. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List All Users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.UserResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Registers a new user account. Does not require prior authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "auth"
                ],
                "summary": "Register New User",
                "parameters": [
                    {
                        "description": "User registration details (Name, Email, Password)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UserCreationSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrUserAlreadyExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a user's profile by their unique ID. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get User by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's profile information. Requires self-management.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (must match authenticated user)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update (e.g., FirstName, ContactEmail)",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UserUpdateSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot update another user's profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the authenticated user's account. Requires self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete User Account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID (must match authenticated user)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Account deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot delete another user's profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/applications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all projects the specified user has applied to. Requires authentication and self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "applicants"
                ],
                "summary": "Get Applications for User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user applications",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.UserApplicationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/config": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new configuration entry for a user, or updates an existing one for the given config_type. Enforces self-management.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "config"
                ],
                "summary": "Set or Update User Configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Configuration Data",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.SetUserConfigInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration successfully saved/updated",
                        "schema": {
                            "$ref": "#/definitions/ports.UserConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot modify another user's config",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/config/{configType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific configuration entry for a user. Enforces self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "config"
                ],
                "summary": "Get User Configuration by Type",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Configuration Type (e.g., user_preferences)",
                        "name": "configType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/ports.UserConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or missing configType",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot view another user's config",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserConfigNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific configuration entry for a user. Enforces self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "config"
                ],
                "summary": "Delete User Configuration by Type",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Configuration Type (e.g., notification_settings)",
                        "name": "configType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Configuration successfully deleted (No Content)"
                    },
                    "400": {
                        "description": "Invalid user ID or missing configType",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot delete another user's config",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserConfigNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/enrolments": {
            "get": {
                "description": "Retrieves a list of all daily activities a specific user is currently enrolled in.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "daily_activities",
                    "enrolments"
                ],
                "summary": "Get All Enrolments for User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of activity enrolments for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.UserEnrolmentResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/l2e-responses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all L2E responses submitted by a specific user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "l2e"
                ],
                "summary": "Get All L2E Responses for User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of L2E responses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.L2EResponseResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all notifications for the specified user. Requires authentication and self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "users"
                ],
                "summary": "Get Notifications for User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by read status (true/false)",
                        "name": "read",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notifications",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.NotificationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or query parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/notifications/read-all": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks all unread notifications for the specified user as read. Requires authentication and self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "users"
                ],
                "summary": "Mark All Notifications as Read",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of notifications marked as read",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/notifications/{notificationID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific notification for the user. Requires authentication and self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "users"
                ],
                "summary": "Delete Single Notification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "notificationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Notification deleted successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid user/notification ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Notification not found for this user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/notifications/{notificationID}/read": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks a specific notification as read. Requires authentication and self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications",
                    "users"
                ],
                "summary": "Mark Single Notification as Read",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "notificationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification marked as read",
                        "schema": {
                            "$ref": "#/definitions/ports.NotificationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user/notification ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Notification not found for this user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/project-memberships": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all projects the specified user is a member of. Requires self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "members"
                ],
                "summary": "Get Projects by User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by member role (manager, contributor, reviewer)",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of project memberships",
                        "schema": {
                            "$ref": "#/definitions/ports.ProjectMembersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/skills": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all skills and proficiency levels associated with the user. Enforces self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "skills"
                ],
                "summary": "Get User Skills",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user skills",
                        "schema": {
                            "$ref": "#/definitions/ports.UserSkillsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new skill and its proficiency level to the authenticated user's profile. Enforces self-management.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "skills"
                ],
                "summary": "Add User Skill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Skill details (SkillID, ProficiencyLevel)",
                        "name": "skill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.CreateUserSkillInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Skill added successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserSkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserNotFound or ErrSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "ErrUserSkillAlreadyExists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/skills/{skillID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the proficiency level for an existing skill associated with the user. Enforces self-management.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "skills"
                ],
                "summary": "Update User Skill Proficiency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "skillID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New proficiency level",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ports.UpdateUserSkillInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Proficiency updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ports.UserSkillResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID, request body, or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a skill association from the user's profile. Enforces self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "skills"
                ],
                "summary": "Remove User Skill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "skillID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Skill removed successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not the target user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserSkillNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/subscriptions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all currently active user subscription records (those not yet expired). Enforces self-management.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "subscriptions"
                ],
                "summary": "Get Active Subscriptions for User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID (must match authenticated user)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active user subscriptions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ports.UserSubscriptionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: Cannot view another user's subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/subscriptions/{userSubscriptionID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancels a specific user subscription record by deleting it from the database. Enforces self-management and ownership of the record.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users",
                    "subscriptions"
                ],
                "summary": "Cancel User Subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target User ID (must match authenticated user)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User Subscription Record ID to cancel",
                        "name": "userSubscriptionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Subscription cancelled successfully (No Content)"
                    },
                    "400": {
                        "description": "Invalid user or subscription ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ErrUserSubscriptionNotFound",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal error during cancellation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Business": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "address": {
                    "type": "string"
                },
                "businessCategory": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "businessPhase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "businessTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BusinessTag"
                    }
                },
                "businessType": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string"
                },
                "contactEmail": {
                    "type": "string"
                },
                "contactName": {
                    "type": "string"
                },
                "contactPhoneNo": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "initiatingConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BusinessConnection"
                    }
                },
                "name": {
                    "type": "string"
                },
                "operatorUser": {
                    "$ref": "#/definitions/models.User"
                },
                "operatorUserID": {
                    "type": "integer"
                },
                "postalCode": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Project"
                    }
                },
                "publications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Publication"
                    }
                },
                "receivingConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BusinessConnection"
                    }
                },
                "state": {
                    "type": "string"
                },
                "tagline": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "models.BusinessCategory": {
            "type": "string",
            "enum": [
                "B2B",
                "B2C",
                "Non_Profit",
                "Government",
                "Mixed"
            ],
            "x-enum-varnames": [
                "BusinessCategoryB2B",
                "BusinessCategoryB2C",
                "BusinessCategoryNonProfit",
                "BusinessCategoryGovernment",
                "BusinessCategoryMixed"
            ]
        },
        "models.BusinessConnection": {
            "type": "object",
            "properties": {
                "connectionType": {
                    "$ref": "#/definitions/models.BusinessConnectionType"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "initiatedByUser": {
                    "$ref": "#/definitions/models.User"
                },
                "initiatedByUserID": {
                    "type": "integer"
                },
                "initiatingBusiness": {
                    "$ref": "#/definitions/models.Business"
                },
                "initiatingBusinessID": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "receivingBusiness": {
                    "$ref": "#/definitions/models.Business"
                },
                "receivingBusinessID": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.BusinessConnectionStatus"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.BusinessConnectionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "active",
                "rejected",
                "inactive"
            ],
            "x-enum-varnames": [
                "ConnectionStatusPending",
                "ConnectionStatusActive",
                "ConnectionStatusRejected",
                "ConnectionStatusInactive"
            ]
        },
        "models.BusinessConnectionType": {
            "type": "string",
            "enum": [
                "Partnership",
                "Supplier",
                "Client",
                "Referral",
                "Collaboration"
            ],
            "x-enum-varnames": [
                "ConnectionTypePartnership",
                "ConnectionTypeSupplier",
                "ConnectionTypeClient",
                "ConnectionTypeReferral",
                "ConnectionTypeCollaboration"
            ]
        },
        "models.BusinessPhase": {
            "type": "string",
            "enum": [
                "Startup",
                "Growth",
                "Mature",
                "Exit"
            ],
            "x-enum-varnames": [
                "BusinessPhaseStartup",
                "BusinessPhaseGrowth",
                "BusinessPhaseMature",
                "BusinessPhaseExit"
            ]
        },
        "models.BusinessTag": {
            "type": "object",
            "properties": {
                "business": {
                    "$ref": "#/definitions/models.Business"
                },
                "businessID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "tagType": {
                    "$ref": "#/definitions/models.BusinessTagType"
                }
            }
        },
        "models.BusinessTagType": {
            "type": "string",
            "enum": [
                "client",
                "service",
                "specialty"
            ],
            "x-enum-varnames": [
                "BusinessTagClient",
                "BusinessTagService",
                "BusinessTagSpecialty"
            ]
        },
        "models.BusinessType": {
            "type": "string",
            "enum": [
                "Consulting",
                "Retail",
                "Technology",
                "Manufacturing",
                "Services",
                "Other"
            ],
            "x-enum-varnames": [
                "BusinessTypeConsulting",
                "BusinessTypeRetail",
                "BusinessTypeTechnology",
                "BusinessTypeManufacturing",
                "BusinessTypeServices",
                "BusinessTypeOther"
            ]
        },
        "models.DailyActivity": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "enrolments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DailyActivityEnrolment"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.DailyActivityEnrolment": {
            "type": "object",
            "properties": {
                "dailyActivity": {
                    "$ref": "#/definitions/models.DailyActivity"
                },
                "dailyActivityID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.DailyActivityProgressStatus": {
            "type": "string",
            "enum": [
                "not_started",
                "in_progress",
                "completed"
            ],
            "x-enum-varnames": [
                "ProgressStatusNotStarted",
                "ProgressStatusInProgress",
                "ProgressStatusCompleted"
            ]
        },
        "models.L2EResponse": {
            "type": "object",
            "properties": {
                "dateAdded": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "response": {
                    "description": "FIX: Apply swaggertype:\"object\"",
                    "type": "object"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Notification": {
            "type": "object",
            "properties": {
                "actionURL": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "notificationType": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "receiverUser": {
                    "$ref": "#/definitions/models.User"
                },
                "receiverUserID": {
                    "type": "integer"
                },
                "relatedEntityID": {
                    "type": "integer"
                },
                "relatedEntityType": {
                    "type": "string"
                },
                "senderUser": {
                    "$ref": "#/definitions/models.User"
                },
                "senderUserID": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "actualEndDate": {
                    "type": "string"
                },
                "business": {
                    "$ref": "#/definitions/models.Business"
                },
                "businessID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "managedByUserID": {
                    "type": "integer"
                },
                "managingUser": {
                    "$ref": "#/definitions/models.User"
                },
                "name": {
                    "type": "string"
                },
                "projectMembers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectMember"
                    }
                },
                "projectRegions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectRegion"
                    }
                },
                "projectSkills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectSkill"
                    }
                },
                "projectStatus": {
                    "$ref": "#/definitions/models.ProjectStatus"
                },
                "startDate": {
                    "type": "string"
                },
                "targetEndDate": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.ProjectApplicant": {
            "type": "object",
            "properties": {
                "project": {
                    "$ref": "#/definitions/models.Project"
                },
                "projectID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.ProjectMember": {
            "type": "object",
            "properties": {
                "joinedAt": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/models.Project"
                },
                "projectID": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/models.ProjectMemberRole"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.ProjectMemberRole": {
            "type": "string",
            "enum": [
                "manager",
                "contributor",
                "reviewer"
            ],
            "x-enum-varnames": [
                "ProjectMemberRoleManager",
                "ProjectMemberRoleContributor",
                "ProjectMemberRoleReviewer"
            ]
        },
        "models.ProjectRegion": {
            "type": "object",
            "properties": {
                "project": {
                    "$ref": "#/definitions/models.Project"
                },
                "projectID": {
                    "type": "integer"
                },
                "region": {
                    "$ref": "#/definitions/models.Region"
                },
                "regionID": {
                    "type": "string"
                }
            }
        },
        "models.ProjectSkill": {
            "type": "object",
            "properties": {
                "importance": {
                    "$ref": "#/definitions/models.ProjectSkillImportance"
                },
                "project": {
                    "$ref": "#/definitions/models.Project"
                },
                "projectID": {
                    "type": "integer"
                },
                "skill": {
                    "$ref": "#/definitions/models.Skill"
                },
                "skillID": {
                    "type": "integer"
                }
            }
        },
        "models.ProjectSkillImportance": {
            "type": "string",
            "enum": [
                "required",
                "preferred",
                "optional"
            ],
            "x-enum-varnames": [
                "SkillImportanceRequired",
                "SkillImportancePreferred",
                "SkillImportanceOptional"
            ]
        },
        "models.ProjectStatus": {
            "type": "string",
            "enum": [
                "planning",
                "active",
                "on_hold",
                "completed",
                "cancelled"
            ],
            "x-enum-varnames": [
                "ProjectStatusPlanning",
                "ProjectStatusActive",
                "ProjectStatusOnHold",
                "ProjectStatusCompleted",
                "ProjectStatusCancelled"
            ]
        },
        "models.Publication": {
            "type": "object",
            "properties": {
                "business": {
                    "$ref": "#/definitions/models.Business"
                },
                "businessID": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "excerpt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "publicationType": {
                    "$ref": "#/definitions/models.PublicationType"
                },
                "published": {
                    "type": "boolean"
                },
                "publishedAt": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                },
                "videoURL": {
                    "type": "string"
                }
            }
        },
        "models.PublicationType": {
            "type": "string",
            "enum": [
                "post",
                "case_study",
                "testimonial",
                "article"
            ],
            "x-enum-varnames": [
                "PublicationPost",
                "PublicationCaseStudy",
                "PublicationTestimonial",
                "PublicationArticle"
            ]
        },
        "models.Region": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Skill": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "projectSkills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectSkill"
                    }
                },
                "userSkills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserSkill"
                    }
                }
            }
        },
        "models.Subscription": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "validDays": {
                    "type": "integer"
                },
                "validMonths": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "adkSessionID": {
                    "type": "string"
                },
                "businesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Business"
                    }
                },
                "contactEmail": {
                    "type": "string"
                },
                "contactPhoneNo": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "dailyActivityEnrolments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DailyActivityEnrolment"
                    }
                },
                "dailyActivityProgress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserDailyActivityProgress"
                    }
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "initiatedConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BusinessConnection"
                    }
                },
                "l2EResponses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.L2EResponse"
                    }
                },
                "lastName": {
                    "type": "string"
                },
                "loginEmail": {
                    "type": "string"
                },
                "managedProjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Project"
                    }
                },
                "passwordHash": {
                    "type": "string"
                },
                "passwordResetRequestedAt": {
                    "type": "string"
                },
                "passwordResetToken": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "projectApplicants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectApplicant"
                    }
                },
                "projectMemberships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectMember"
                    }
                },
                "publications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Publication"
                    }
                },
                "receivedNotifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Notification"
                    }
                },
                "sentNotifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Notification"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "userConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserConfig"
                    }
                },
                "userSessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserSession"
                    }
                },
                "userSkills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserSkill"
                    }
                },
                "userSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserSubscription"
                    }
                }
            }
        },
        "models.UserConfig": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "FIX: Apply swaggertype:\"object\" (already done, confirming for completeness)",
                    "type": "object"
                },
                "configType": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserDailyActivityProgress": {
            "type": "object",
            "properties": {
                "dailyActivity": {
                    "$ref": "#/definitions/models.DailyActivity"
                },
                "dailyActivityID": {
                    "type": "integer"
                },
                "date": {
                    "description": "FIX: Apply swaggertype:\"string\"",
                    "type": "string"
                },
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.DailyActivityProgressStatus"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserSession": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ipaddress": {
                    "type": "string"
                },
                "revokedAt": {
                    "type": "string"
                },
                "tokenHash": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userAgent": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserSkill": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "proficiencyLevel": {
                    "$ref": "#/definitions/models.UserSkillProficiency"
                },
                "skill": {
                    "$ref": "#/definitions/models.Skill"
                },
                "skillID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserSkillProficiency": {
            "type": "string",
            "enum": [
                "beginner",
                "intermediate",
                "advanced",
                "expert"
            ],
            "x-enum-varnames": [
                "ProficiencyBeginner",
                "ProficiencyIntermediate",
                "ProficiencyAdvanced",
                "ProficiencyExpert"
            ]
        },
        "models.UserSubscription": {
            "type": "object",
            "properties": {
                "dateFrom": {
                    "type": "string"
                },
                "dateTo": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isTrial": {
                    "type": "boolean"
                },
                "subscription": {
                    "$ref": "#/definitions/models.Subscription"
                },
                "subscriptionID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "ports.ActivityEnrolmentResponse": {
            "type": "object",
            "properties": {
                "daily_activity_id": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                }
            }
        },
        "ports.AddProjectMemberInput": {
            "type": "object",
            "required": [
                "project_id",
                "role",
                "user_id"
            ],
            "properties": {
                "project_id": {
                    "type": "integer"
                },
                "role": {
                    "enum": [
                        "manager",
                        "contributor",
                        "reviewer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectMemberRole"
                        }
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.AddProjectRegionInput": {
            "type": "object",
            "required": [
                "project_id",
                "region_id"
            ],
            "properties": {
                "project_id": {
                    "type": "integer"
                },
                "region_id": {
                    "type": "string"
                }
            }
        },
        "ports.BusinessConnectionResponse": {
            "type": "object",
            "properties": {
                "connection_type": {
                    "$ref": "#/definitions/models.BusinessConnectionType"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "initiated_by_user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "initiated_by_user_id": {
                    "type": "integer"
                },
                "initiating_business": {
                    "$ref": "#/definitions/ports.BusinessResponse"
                },
                "initiating_business_id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "receiving_business": {
                    "$ref": "#/definitions/ports.BusinessResponse"
                },
                "receiving_business_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.BusinessConnectionStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "ports.BusinessConnectionsResponse": {
            "type": "object",
            "properties": {
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.BusinessConnectionResponse"
                    }
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "ports.BusinessResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "address": {
                    "type": "string"
                },
                "business_category": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "business_phase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "business_type": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "operator_user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "operator_user_id": {
                    "type": "integer"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "tagline": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "ports.BusinessTagResponse": {
            "type": "object",
            "properties": {
                "business": {
                    "$ref": "#/definitions/ports.BusinessResponse"
                },
                "business_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "tag_type": {
                    "$ref": "#/definitions/models.BusinessTagType"
                }
            }
        },
        "ports.BusinessTagsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.BusinessTagResponse"
                    }
                }
            }
        },
        "ports.CreateBusinessConnectionInput": {
            "type": "object",
            "required": [
                "connection_type",
                "initiated_by_user_id",
                "initiating_business_id",
                "receiving_business_id"
            ],
            "properties": {
                "connection_type": {
                    "enum": [
                        "Partnership",
                        "Supplier",
                        "Client",
                        "Referral",
                        "Collaboration"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BusinessConnectionType"
                        }
                    ]
                },
                "initiated_by_user_id": {
                    "type": "integer"
                },
                "initiating_business_id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "receiving_business_id": {
                    "type": "integer"
                }
            }
        },
        "ports.CreateBusinessInput": {
            "type": "object",
            "required": [
                "business_category",
                "business_phase",
                "business_type",
                "name",
                "operator_user_id"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 100
                },
                "business_category": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "business_phase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "business_type": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "country": {
                    "type": "string",
                    "maxLength": 60
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "operator_user_id": {
                    "type": "integer"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "state": {
                    "type": "string",
                    "maxLength": 60
                },
                "tagline": {
                    "type": "string",
                    "maxLength": 100
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "ports.CreateBusinessTagInput": {
            "type": "object",
            "required": [
                "business_id",
                "description",
                "tag_type"
            ],
            "properties": {
                "business_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "tag_type": {
                    "enum": [
                        "client",
                        "service",
                        "specialty"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BusinessTagType"
                        }
                    ]
                }
            }
        },
        "ports.CreateDailyActivityInput": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                }
            }
        },
        "ports.CreateEventInput": {
            "type": "object",
            "required": [
                "event_type",
                "payload"
            ],
            "properties": {
                "event_type": {
                    "type": "string",
                    "maxLength": 100
                },
                "payload": {
                    "type": "object"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.CreateFeedbackInput": {
            "type": "object",
            "required": [
                "content",
                "email",
                "name"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 120,
                    "minLength": 2
                }
            }
        },
        "ports.CreateInferredConnectionInput": {
            "type": "object",
            "required": [
                "confidence_score",
                "connection_type",
                "source_entity_id",
                "source_entity_type",
                "target_entity_id",
                "target_entity_type"
            ],
            "properties": {
                "confidence_score": {
                    "type": "number"
                },
                "connection_type": {
                    "type": "string"
                },
                "model_version": {
                    "type": "string"
                },
                "source_entity_id": {
                    "type": "integer"
                },
                "source_entity_type": {
                    "type": "string"
                },
                "target_entity_id": {
                    "type": "integer"
                },
                "target_entity_type": {
                    "type": "string"
                }
            }
        },
        "ports.CreateL2EResponseInput": {
            "type": "object",
            "required": [
                "response"
            ],
            "properties": {
                "response": {
                    "type": "object"
                }
            }
        },
        "ports.CreateNotificationInput": {
            "type": "object",
            "required": [
                "message",
                "notification_type",
                "receiver_user_id",
                "title"
            ],
            "properties": {
                "action_url": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "notification_type": {
                    "type": "string"
                },
                "receiver_user_id": {
                    "type": "integer"
                },
                "related_entity_id": {
                    "type": "integer"
                },
                "related_entity_type": {
                    "type": "string"
                },
                "sender_user_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "ports.CreateProjectInput": {
            "type": "object",
            "required": [
                "managed_by_user_id",
                "name",
                "project_status"
            ],
            "properties": {
                "business_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "managed_by_user_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "project_status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                },
                "region_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_date": {
                    "type": "string"
                },
                "target_end_date": {
                    "type": "string"
                }
            }
        },
        "ports.CreateProjectSkillInput": {
            "type": "object",
            "required": [
                "importance",
                "project_id",
                "skill_id"
            ],
            "properties": {
                "importance": {
                    "enum": [
                        "required",
                        "preferred",
                        "optional"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectSkillImportance"
                        }
                    ]
                },
                "project_id": {
                    "type": "integer"
                },
                "skill_id": {
                    "type": "integer"
                }
            }
        },
        "ports.CreatePublicationInput": {
            "type": "object",
            "required": [
                "content",
                "publication_type",
                "title",
                "user_id"
            ],
            "properties": {
                "business_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "excerpt": {
                    "type": "string"
                },
                "publication_type": {
                    "$ref": "#/definitions/models.PublicationType"
                },
                "published": {
                    "type": "boolean"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "user_id": {
                    "type": "integer"
                },
                "video_url": {
                    "type": "string"
                }
            }
        },
        "ports.CreateSkillInput": {
            "type": "object",
            "required": [
                "category",
                "name"
            ],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "ports.CreateSubscriptionInput": {
            "type": "object",
            "required": [
                "name",
                "price"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "price": {
                    "type": "number",
                    "minimum": 0
                },
                "valid_days": {
                    "type": "integer"
                },
                "valid_months": {
                    "type": "integer"
                }
            }
        },
        "ports.CreateUserSkillInput": {
            "type": "object",
            "required": [
                "proficiency_level",
                "skill_id",
                "user_id"
            ],
            "properties": {
                "proficiency_level": {
                    "enum": [
                        "beginner",
                        "intermediate",
                        "advanced",
                        "expert"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserSkillProficiency"
                        }
                    ]
                },
                "skill_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.DailyActivityResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ports.EventResponse": {
            "type": "object",
            "properties": {
                "event_type": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "payload": {
                    "type": "object"
                },
                "timestamp": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.FeedbackResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "date_submitted": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ports.InferredConnectionResponse": {
            "type": "object",
            "properties": {
                "confidence_score": {
                    "type": "number"
                },
                "connection_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "model_version": {
                    "type": "string"
                },
                "source_entity_id": {
                    "type": "integer"
                },
                "source_entity_type": {
                    "type": "string"
                },
                "target_entity_id": {
                    "type": "integer"
                },
                "target_entity_type": {
                    "type": "string"
                }
            }
        },
        "ports.L2EResponseResponse": {
            "type": "object",
            "properties": {
                "date_added": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "response": {
                    "type": "object"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.LoginInput": {
            "type": "object",
            "required": [
                "login_email",
                "password"
            ],
            "properties": {
                "login_email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "ports.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "session_id": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                }
            }
        },
        "ports.NotificationResponse": {
            "type": "object",
            "properties": {
                "action_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "notification_type": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "receiver": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "related_entity_id": {
                    "type": "integer"
                },
                "related_entity_type": {
                    "type": "string"
                },
                "sender": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "ports.ProjectApplicantResponse": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.ProjectMemberResponse": {
            "type": "object",
            "properties": {
                "joined_at": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/ports.ProjectResponse"
                },
                "project_id": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/models.ProjectMemberRole"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.ProjectMembersResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.ProjectMemberResponse"
                    }
                }
            }
        },
        "ports.ProjectRegionResponse": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "integer"
                },
                "region": {
                    "$ref": "#/definitions/ports.RegionResponse"
                },
                "region_id": {
                    "type": "string"
                }
            }
        },
        "ports.ProjectResponse": {
            "type": "object",
            "properties": {
                "actual_end_date": {
                    "type": "string"
                },
                "business": {
                    "$ref": "#/definitions/ports.BusinessResponse"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "manager": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.ProjectMemberResponse"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.RegionResponse"
                    }
                },
                "start_date": {
                    "type": "string"
                },
                "target_end_date": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "ports.ProjectSkillResponse": {
            "type": "object",
            "properties": {
                "importance": {
                    "$ref": "#/definitions/models.ProjectSkillImportance"
                },
                "project": {
                    "$ref": "#/definitions/ports.ProjectResponse"
                },
                "project_id": {
                    "type": "integer"
                },
                "skill": {
                    "$ref": "#/definitions/ports.SkillResponse"
                },
                "skill_id": {
                    "type": "integer"
                }
            }
        },
        "ports.ProjectSkillsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.ProjectSkillResponse"
                    }
                }
            }
        },
        "ports.PublicationResponse": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "business": {
                    "$ref": "#/definitions/ports.BusinessResponse"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "excerpt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "publication_type": {
                    "$ref": "#/definitions/models.PublicationType"
                },
                "published": {
                    "type": "boolean"
                },
                "published_at": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "video_url": {
                    "type": "string"
                }
            }
        },
        "ports.RegionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ports.SetUserConfigInput": {
            "type": "object",
            "required": [
                "config",
                "config_type"
            ],
            "properties": {
                "config": {
                    "type": "object"
                },
                "config_type": {
                    "type": "string"
                }
            }
        },
        "ports.SkillResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ports.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "valid_days": {
                    "type": "integer"
                },
                "valid_months": {
                    "type": "integer"
                }
            }
        },
        "ports.UpdateBusinessConnectionInput": {
            "type": "object",
            "properties": {
                "connection_type": {
                    "enum": [
                        "Partnership",
                        "Supplier",
                        "Client",
                        "Referral",
                        "Collaboration"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BusinessConnectionType"
                        }
                    ]
                },
                "notes": {
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "pending",
                        "active",
                        "rejected",
                        "inactive"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BusinessConnectionStatus"
                        }
                    ]
                }
            }
        },
        "ports.UpdateBusinessInput": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "address": {
                    "type": "string",
                    "maxLength": 100
                },
                "business_category": {
                    "$ref": "#/definitions/models.BusinessCategory"
                },
                "business_phase": {
                    "$ref": "#/definitions/models.BusinessPhase"
                },
                "business_type": {
                    "$ref": "#/definitions/models.BusinessType"
                },
                "city": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string",
                    "maxLength": 60
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "country": {
                    "type": "string",
                    "maxLength": 60
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20
                },
                "state": {
                    "type": "string",
                    "maxLength": 60
                },
                "tagline": {
                    "type": "string",
                    "maxLength": 100
                },
                "value": {
                    "type": "number"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "ports.UpdateProjectInput": {
            "type": "object",
            "properties": {
                "actual_end_date": {
                    "type": "string"
                },
                "business_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "managed_by_user_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "project_status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                },
                "region_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_date": {
                    "type": "string"
                },
                "target_end_date": {
                    "type": "string"
                }
            }
        },
        "ports.UpdateProjectMemberRoleInput": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "enum": [
                        "manager",
                        "contributor",
                        "reviewer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectMemberRole"
                        }
                    ]
                }
            }
        },
        "ports.UpdateProjectSkillInput": {
            "type": "object",
            "properties": {
                "importance": {
                    "enum": [
                        "required",
                        "preferred",
                        "optional"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectSkillImportance"
                        }
                    ]
                }
            }
        },
        "ports.UpdatePublicationInput": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "excerpt": {
                    "type": "string"
                },
                "published": {
                    "type": "boolean"
                },
                "thumbnail": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "video_url": {
                    "type": "string"
                }
            }
        },
        "ports.UpdateSkillInput": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "ports.UpdateUserSkillInput": {
            "type": "object",
            "properties": {
                "proficiency_level": {
                    "enum": [
                        "beginner",
                        "intermediate",
                        "advanced",
                        "expert"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserSkillProficiency"
                        }
                    ]
                }
            }
        },
        "ports.UserApplicationResponse": {
            "type": "object",
            "properties": {
                "project": {
                    "$ref": "#/definitions/ports.ProjectResponse"
                },
                "project_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.UserConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object"
                },
                "config_type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.UserCreationSchema": {
            "type": "object",
            "required": [
                "first_name",
                "login_email",
                "password"
            ],
            "properties": {
                "adk_session_id": {
                    "type": "string",
                    "maxLength": 128
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "login_email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8
                }
            }
        },
        "ports.UserEnrolmentResponse": {
            "type": "object",
            "properties": {
                "daily_activity": {
                    "$ref": "#/definitions/ports.DailyActivityResponse"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.UserResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "login_email": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "ports.UserSkillResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "proficiency_level": {
                    "$ref": "#/definitions/models.UserSkillProficiency"
                },
                "skill": {
                    "$ref": "#/definitions/ports.SkillResponse"
                },
                "skill_id": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.UserSkillsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ports.UserSkillResponse"
                    }
                }
            }
        },
        "ports.UserSubscribeInput": {
            "type": "object",
            "required": [
                "subscription_id",
                "user_id"
            ],
            "properties": {
                "subscription_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "ports.UserSubscriptionResponse": {
            "type": "object",
            "properties": {
                "date_from": {
                    "type": "string"
                },
                "date_to": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_trial": {
                    "type": "boolean"
                },
                "subscription": {
                    "$ref": "#/definitions/ports.SubscriptionResponse"
                },
                "user": {
                    "$ref": "#/definitions/ports.UserResponse"
                }
            }
        },
        "ports.UserUpdateSchema": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "adk_session_id": {
                    "type": "string",
                    "maxLength": 128
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone_no": {
                    "type": "string",
                    "maxLength": 20
                },
                "email_verified": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2
                },
                "login_email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and your JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}